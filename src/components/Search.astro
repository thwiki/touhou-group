---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

const listEntries = (await getCollection('lists')).sort((a, b) => a.data.id - b.data.id);

// 获取所有唯一的标签
const allLabels = new Set<string>();
listEntries.forEach((entry: CollectionEntry<'lists'>) => {
  entry.data.sections.forEach((section) => {
    section.groups.forEach((group) => {
      group.labels.forEach((label: string) => allLabels.add(label));
    });
  });
});
---

<div class="mb-8 mt-8 flex justify-center">
  <div class="relative w-full max-w-md">
    <input
      type="text"
      id="search-input"
      class="w-full rounded-full border border-gray-200 bg-gray-50 px-6 py-3 text-sm shadow-sm transition-colors placeholder:text-gray-400 focus:border-amber-500 focus:bg-white focus:outline-none focus:ring-2 focus:ring-amber-500"
      placeholder="搜索标签/群号/群名/群简介..."
    />
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      class="pointer-events-none absolute right-4 top-1/2 h-5 w-5 -translate-y-1/2 text-gray-400"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
      />
    </svg>
  </div>
</div>
<div id="no-results" class="mt-4 hidden text-center text-gray-500">
  没有找到匹配的群组
</div>

<script>
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const groupCards = document.querySelectorAll<HTMLElement>('.grid-areas-card[id^="group-"]');
  const noResults = document.getElementById('no-results') as HTMLElement;
  
  // 从 URL 获取搜索参数
  function getSearchParam() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('q') || '';
  }

  // 清空搜索并显示所有内容
  function clearSearch() {
    searchInput.value = '';
    searchInput.dispatchEvent(new Event('input'));
  }
  
  // 监听搜索输入
  searchInput.addEventListener('input', () => {
    const searchText = searchInput.value.trim().toLowerCase();
    
    // 更新 URL，但不触发页面刷新
    const url = new URL(window.location.href);
    if (searchText) {
      url.searchParams.set('q', searchText);
    } else {
      url.searchParams.delete('q');
    }
    window.history.replaceState({}, '', url.toString());
    
    // 创建一个 Map 来跟踪每个标题下是否有可见的卡片
    const sectionVisibility = new Map<string, boolean>();
    let hasVisibleCards = false;

    // 高亮文本的函数
    function highlightText(text: string, searchText: string): string {
      if (!searchText) return text;
      // 转义正则特殊字符
      const escapedSearchText = searchText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      const regex = new RegExp(`(${escapedSearchText})`, 'gi');
      return text.replace(regex, '<mark class="bg-amber-200">$1</mark>');
    }
    
    groupCards.forEach(card => {
      const cardLabels = Array.from(card.querySelectorAll<HTMLElement>('.grid-in-labels > div'))
        .map(label => label.textContent?.trim().toLowerCase())
        .filter((label): label is string => label !== undefined);
      
      // 获取群名、群号和群简介
      const groupIdElement = card.querySelector<HTMLElement>('.grid-in-content > div:first-child');
      const groupNameElement = card.querySelector<HTMLElement>('.grid-in-content > div:nth-child(2)');
      const groupMemoElement = card.querySelector<HTMLElement>('.grid-in-content > div:last-child');
      
      const groupId = groupIdElement?.textContent?.trim().toLowerCase() || '';
      const groupName = groupNameElement?.textContent?.trim().toLowerCase() || '';
      const groupMemo = groupMemoElement?.textContent?.trim().toLowerCase() || '';
      
      // 如果搜索框为空，显示所有卡片并移除高亮
      if (searchText === '') {
        if (groupIdElement) groupIdElement.innerHTML = groupId;
        if (groupNameElement) groupNameElement.innerHTML = groupName;
        if (groupMemoElement) groupMemoElement.innerHTML = groupMemo;
        card.style.display = '';
        hasVisibleCards = true;
        // 获取卡片所属的标题元素
        const sectionId = card.closest('section')?.id;
        if (sectionId) {
          sectionVisibility.set(sectionId, true);
        }
        return;
      }
      
      // 检查标签、群名、群号或群简介是否包含搜索文本
      const shouldShow = cardLabels.some(label => label.includes(searchText)) ||
        groupName.includes(searchText) ||
        groupId.includes(searchText) ||
        groupMemo.includes(searchText);
      
      // 如果卡片应该显示，添加高亮
      if (shouldShow) {
        if (groupIdElement) groupIdElement.innerHTML = highlightText(groupIdElement.textContent || '', searchText);
        if (groupNameElement) groupNameElement.innerHTML = highlightText(groupNameElement.textContent || '', searchText);
        if (groupMemoElement) groupMemoElement.innerHTML = highlightText(groupMemoElement.textContent || '', searchText);
        card.style.display = '';
        hasVisibleCards = true;
      } else {
        card.style.display = 'none';
      }
      
      // 获取卡片所属的标题元素
      const sectionId = card.closest('section')?.id;
      if (sectionId) {
        sectionVisibility.set(sectionId, sectionVisibility.get(sectionId) || shouldShow);
      }
    });

    const sections = document.querySelectorAll('section');
    // 遍历所有section，检查相邻section之间的可见性
    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      // 一级标题和地图
      if (section.id === 'title-section') {
        section.style.display = '';
        continue;
      }
      // 二级标题
      if (section.firstElementChild?.tagName === 'H2') {
        if (sectionVisibility.get(section.id)){
          // 二级标题自带卡片
          section.style.display = '';
        } else {
          // 二级标题仅标题，找下属三级标题有无卡片
          if (i < sections.length-1){
            const nextSection = sections[i+1]
            if (nextSection.firstElementChild?.tagName === 'H3' && sectionVisibility.get(nextSection.id)) {
              section.style.display = '';
              continue;
            }
          }
        }
      }
      // 三级标题
      if (sectionVisibility.get(section.id)){
        section.style.display = '';
      } else {
        section.style.display = 'none';
      }
    }

    // 显示或隐藏无结果提示
    if (searchText !== '' && !hasVisibleCards) {
      noResults.classList.remove('hidden');
    } else {
      noResults.classList.add('hidden');
    }
  });

  // 监听侧边栏链接点击
  document.querySelectorAll('#sidebar a').forEach(link => {
    link.addEventListener('click', (e) => {
      const href = (e.currentTarget as HTMLAnchorElement).getAttribute('href');
      // 如果不是锚点链接，则清空搜索
      if (href && !href.startsWith('#')) {
        clearSearch();
      }
    });
  });

  // 监听地图区域点击
  document.querySelectorAll('svg a').forEach(link => {
    link.addEventListener('click', () => {
      clearSearch();
    });
  });

  // 页面加载时检查 URL 参数并执行搜索
  window.addEventListener('load', () => {
    const searchParam = getSearchParam();
    if (searchParam) {
      searchInput.value = searchParam;
      searchInput.dispatchEvent(new Event('input'));
    }
  });
</script>